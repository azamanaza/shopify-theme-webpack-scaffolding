{% comment %}
Retrieve all necessary page and section settings to render the expected announcement as per specification.
{% endcomment %}
{% assign enabled = section.settings.enabled %}
{% assign isGlobal = section.settings.isGlobal %}
{% assign currentPage = page.url %}
{% assign text = section.settings.text %}
{% assign link = section.settings.linkLabel %}
{% assign url = section.settings.linkUrl %}
{% assign textColor = section.settings.textColor %}
{% assign linkColor = section.settings.linkColor %}
{% assign bgColor = section.settings.bgColor %}

{% comment %}
Display announcement based on these conditions:
- enabled
- set to show globally
- set to show on the home (index) page only

Note: If you use multiple and or or operators, note that and operators will be evaluated first, 
then or operators. You cannot use parentheses to simulate an order of operations and control 
the order of operator evaluation. Parentheses are invalid characters within Liquid tags and 
prevent your tags from working.

This is why the template check explictly uses the or operator.
{% endcomment %}
{% if enabled %}
  {% if template contains 'index' or isGlobal %}
  <div class="p-3">
      <p class="text-center m-0 p-0" data-cy="announcement-text">
          {{ text }}
          {% comment %}
          Since link is an optional input, we will only show it if both the label and url are provided.
          {% endcomment %}
          {% if link != null and link != '' and url != null and url != '' %}
            <a href="{{ url }}" data-cy="announcement-link">{{ link }}</a>
          {% endif %}
      </p>
  </div>

  {% comment %}
  Here we're using style tag instead of stylesheet.
  The stylesheet tag does not evaluate handlebars, hence we use style instead and directly put the style definition along with the html.

  As a safety precaution, we wont be styling the section's container directly and instead use the DOM defined within the container, in this case we're using
  .ag-announcement, reason being:
  - we dont want it to render styles if the section has a toggle feature.
  - we dont want to override global definitions.
  - we are using native css since shopify is discontinuing scss support, ofloading css preprocessing to developer/agency preference.
  - we are defining them here instead of in our own scss infra, because of it's configurability.
  {% endcomment %}
  {% style %}
  .ag-announcement {
    background-color: {{bgColor}} !important;
  }
  .ag-announcement h1 {
    color: {{textColor}} !important;
  }
  .ag-announcement a {
    color: {{linkColor}} !important;
  }
  {% endstyle %}

  {% endif %}
{% endif %}


{% comment %}
Below defines the structure and controllable aspects of the section.
These configurations define how the section is rendered and configured on the admin side.
{% endcomment %}
{% schema %}
{
  "name": "Announcement",
  "class": "ag-announcement",
  "settings": [
    {
      "id": "text",
      "type": "text",
      "label": "Text",
      "placeholder": "Announcement text"
    },
    {
      "id": "linkLabel",
      "type": "text",
      "label": "Link Label",
      "placeholder": "Ex. Click here!"
    },
    {
      "id": "linkUrl",
      "type": "url",
      "label": "Link URL"
    },
    {
      "id": "textColor",
      "type": "color",
      "label": "Text Colour",
      "default": "#000"
    },
    {
      "id": "linkColor",
      "type": "color",
      "label": "Link Colour",
      "default": "#0000ff"
    },
    {
      "id": "bgColor",
      "type": "color",
      "label": "Background Colour",
      "default": "#fff"
    },
    {
      "id": "enabled",
      "type": "checkbox",
      "label": "Enable/Disable",
      "default": true
    },
    {
      "id": "isGlobal",
      "type": "checkbox",
      "label": "Global/Homepage only",
      "default": true
    }
  ]
}
{% endschema %}